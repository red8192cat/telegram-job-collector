"""
Callback Handlers - Simplified menu interactions with merged /start
"""

import logging
from telegram import Update
from telegram.ext import CallbackQueryHandler, ContextTypes

from storage.sqlite_manager import SQLiteManager
from utils.helpers import create_main_menu, create_back_menu, get_help_text, get_keywords_help, get_ignore_help

logger = logging.getLogger(__name__)

class CallbackHandlers:
    def __init__(self, data_manager: SQLiteManager):
        self.data_manager = data_manager
    
    def register(self, app):
        """Register callback query handler"""
        app.add_handler(CallbackQueryHandler(self.handle_callback_query))
        logger.info("Callback query handler registered")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline buttons"""
        query = update.callback_query
        if not query:
            return
            
        try:
            await query.answer()
            
            if query.data == "menu_keywords":
                await query.edit_message_text(get_keywords_help(), reply_markup=create_back_menu())
            elif query.data == "menu_ignore":
                await query.edit_message_text(get_ignore_help(), reply_markup=create_back_menu())
            elif query.data == "menu_show_settings":
                chat_id = query.from_user.id
                
                # Get both keywords and ignore keywords
                keywords = await self.data_manager.get_user_keywords(chat_id)
                ignore_keywords = await self.data_manager.get_user_ignore_keywords(chat_id)
                
                # Build combined message - same as /my_settings command
                msg = "‚öôÔ∏è Your Current Settings\n\n"
                
                if keywords:
                    msg += f"üìù Keywords: {', '.join(keywords)}\n\n"
                else:
                    msg += "üìù Keywords: None set\nUse /keywords to set them.\n\n"
                
                if ignore_keywords:
                    msg += f"üö´ Ignore Keywords: {', '.join(ignore_keywords)}\n\n"
                else:
                    msg += "üö´ Ignore Keywords: None set\nUse /ignore_keywords to set them.\n\n"
                
                msg += "üí° Quick Commands:\n"
                msg += "‚Ä¢ /keywords - Update search keywords\n"
                msg += "‚Ä¢ /ignore_keywords - Update ignore keywords\n"
                msg += "‚Ä¢ /purge_ignore - Clear all ignore keywords"
                
                await query.edit_message_text(msg, reply_markup=create_back_menu())
            elif query.data == "menu_help":
                await query.edit_message_text(get_help_text(), reply_markup=create_back_menu())
            elif query.data == "menu_back":
                # Back button now shows the /start message with menu
                welcome_msg = (
                    "ü§ñ Welcome to Job Collector Bot!\n\n"
                    "I help you collect job postings from configured channels based on your keywords.\n\n"
                    "‚úÖ Unlimited job forwards\n"
                    "‚úÖ Advanced keyword filtering\n"
                    "‚úÖ Ignore unwanted posts\n\n"
                    "Use the menu below to get started:"
                )
                await query.edit_message_text(welcome_msg, reply_markup=create_main_menu())
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")