"""
Secure Command Handlers - Authentication commands only for authorized admin
"""

import logging
import os
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

from storage.sqlite_manager import SQLiteManager
from utils.helpers import is_private_chat, create_main_menu, get_help_text, get_set_keywords_help, get_add_keyword_help

logger = logging.getLogger(__name__)

class CommandHandlers:
    def __init__(self, data_manager: SQLiteManager):
        self.data_manager = data_manager
    
    def _is_authorized_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Check if user is authorized admin"""
        user_monitor = getattr(context.bot_data, 'user_monitor', None)
        if not user_monitor:
            return False
        
        user_id = update.effective_user.id
        return user_monitor.is_authorized_admin(user_id)
    
    def register(self, app):
        """Register all command handlers"""
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("menu", self.menu_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("keywords", self.set_keywords_command))
        app.add_handler(CommandHandler("ignore_keywords", self.set_ignore_keywords_command))
        app.add_handler(CommandHandler("add_keyword_to_list", self.add_keyword_command))
        app.add_handler(CommandHandler("delete_keyword_from_list", self.delete_keyword_command))
        app.add_handler(CommandHandler("add_ignore_keyword", self.add_ignore_keyword_command))
        app.add_handler(CommandHandler("delete_ignore_keyword", self.delete_ignore_keyword_command))
        app.add_handler(CommandHandler("purge_ignore", self.purge_ignore_keywords_command))
        app.add_handler(CommandHandler("my_keywords", self.show_keywords_command))
        app.add_handler(CommandHandler("my_ignore", self.show_ignore_keywords_command))
        
        # SECURE authentication commands - only for authorized admin
        app.add_handler(CommandHandler("auth_status", self.auth_status_command))
        app.add_handler(CommandHandler("auth_restart", self.auth_restart_command))
        
        logger.info("Command handlers registered")
    
    # ... [keep all existing command methods exactly the same] ...
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        if not is_private_chat(update):
            logger.info("Start command ignored - not a private chat")
            return
        
        logger.info(f"Start command from user {update.effective_user.id}")
        
        welcome_msg = (
            "ü§ñ Welcome to Job Collector Bot!\n\n"
            "I help you collect job postings from configured channels based on your keywords.\n\n"
            "‚úÖ All users get unlimited job forwards\n"
            "‚úÖ Advanced keyword filtering with ignore list\n\n"
            "Use the menu below to get started:"
        )
        
        menu_markup = create_main_menu()
        logger.info(f"Sending welcome with menu to user {update.effective_user.id}")
        
        await update.message.reply_text(welcome_msg, reply_markup=menu_markup)
        logger.info("Welcome message sent successfully")
    
    # [Include all other existing command methods here - they remain unchanged]
    # ... [I'll skip them for brevity but include in actual file] ...
    
    # SECURE Authentication commands - ADMIN ONLY
    async def auth_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /auth_status command - ADMIN ONLY"""
        if not is_private_chat(update):
            return
        
        # SECURITY: Only authorized admin can use this command
        if not self._is_authorized_admin(update, context):
            await update.message.reply_text("‚ùì Unknown command. Use /help to see available commands.")
            return
        
        user_monitor = getattr(context.bot_data, 'user_monitor', None)
        if not user_monitor:
            await update.message.reply_text("‚ùå User account monitoring is not enabled.")
            return
        
        status = user_monitor.get_auth_status()
        
        if status == "disabled":
            await update.message.reply_text("‚ÑπÔ∏è User account monitoring is disabled (no credentials configured).")
        elif status == "not_initialized":
            await update.message.reply_text("‚ùå User account monitoring failed to initialize.")
        elif status == "waiting_for_code":
            await update.message.reply_text("üì± **Waiting for SMS verification code**\n\nPlease send the code you received.")
        elif status == "waiting_for_2fa":
            await update.message.reply_text("üîê **Waiting for 2FA password**\n\nPlease send your two-factor authentication password.")
        elif status == "authenticated":
            await update.message.reply_text("‚úÖ **User account authenticated!**\n\nMonitoring is active and working.")
        else:
            await update.message.reply_text("‚ùì Unknown status. Use /auth_restart to restart authentication.")

    async def auth_restart_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /auth_restart command - ADMIN ONLY"""
        if not is_private_chat(update):
            return
        
        # SECURITY: Only authorized admin can use this command  
        if not self._is_authorized_admin(update, context):
            await update.message.reply_text("‚ùì Unknown command. Use /help to see available commands.")
            return
        
        chat_id = update.effective_chat.id
        
        user_monitor = getattr(context.bot_data, 'user_monitor', None)
        if not user_monitor:
            await update.message.reply_text("‚ùå User account monitoring is not enabled.")
            return
        
        success = await user_monitor.restart_auth(chat_id)
        if success:
            await update.message.reply_text("üîÑ **Authentication restarted**\n\nCheck your phone for the verification code.")
        else:
            await update.message.reply_text("‚ùå Failed to restart authentication.")
    
    # [Add all other existing methods here - keeping them exactly the same]
